<% include head %>
<% 
function appendChecksum(matric) {
  var sum = 0;
  for (var i=1; i<8; i++) {
      sum += parseInt(matric[i]);
  }
  var table = ['Y', 'X', 'W', 'U', 'R', 'N', 'M', 'L', 'J', 'H', 'E', 'A', 'B'];
  if (typeof table[sum%13] == "undefined") return matric;
  return matric + table[sum%13];
}
%>
<div class="text-center">
    <h1><%= person.displayName %></h1>
</div>
    
<table class="table">
    <tr>
        <th>Matric</th>
        <td style="text-transform:uppercase"><%= appendChecksum(person.matric) %></td>
    </tr>
    <tr>
        <th>Email</th>
        <td><%= person.email %></td>
    </tr>
    <% if (person.forwardTo) { %>
    <tr>
        <th>Forwarded to</th>
        <td><%= person.forwardTo ? person.forwardTo : '-' %></td>
    </tr>
    <% } %>
    <tr>
        <th>Career</th>
        <td>
            <ul>
                <% for (var i=0; i<person.careers.length; i++){ %>
                    <li><%= person.careers[i].name %></li>
                <% } %>
            </ul>
        </td>
    </tr>
    <tr>
        <th>Faculty</th>
        <td>
            <ul>
                <% for (var i=0; i<person.faculties.length; i++){ %>
                    <li><%= person.faculties[i].name %></li>
                <% } %>
            </ul>
        </td>
    </tr>
    <tr>
        <th>Course</th>
        <td>
            <ul>
                <% for (var i=0; i<person.courses.length; i++){ %>
                    <li><%= person.courses[i].name %></li>
                <% } %>
            </ul>
        </td>
    </tr>
</table>

<% if (person.modules.length > 0) { %>
    <h3>Module History</h3>
    <table id="table-modules" class="table">
        <thead>
            <tr>
                <th colspan="2">Semester</th>
                <th rowspan="2" class="group-letter-2">Code</th>
                <th rowspan="2" class="group-none">Title</th>
                <th rowspan="2">MC</th>
            </tr>
            <tr>
                <th class="sorter-false group-letter-99">Year</th>
                <th class="sorter-false">Sem</th>
            </tr>
        </thead>
        <tbody>
            <% for (var i=0; i<person.modules.length; i++){ %>
                <% var m = person.modules[i] %>
                <tr onclick="module('<%= m.code %>');" class="table-hand">
                    <td><%= 2000 + m.StudentModule.year %> <span style="display:none"> Semester <%= m.StudentModule.semester %></span></td>
                    <td><%= m.StudentModule.semester %></td>
                    <td><%= m.code %></td>
                    <td><%= m.name %></td>
                    <td><%= m.mc %></td>
                </tr>
            <% } %>
        </tbody>
    </table>

    <h3>Modules By Department</h3>
    <div class="thumbnail chart">
        <div id="module-by-dept-chart" style="height:300px"></div>
    </div>
    
    <h3>Modules By Level</h3>
    <div class="thumbnail chart">
        <div id="module-by-level-chart" style="height:300px"></div>
    </div>
    
    <script>
    $(function() {
        $.extend($.tablesorter.themes.bootstrap, {
            // these classes are added to the table. To see other table classes available,
            // look here: http://twitter.github.com/bootstrap/base-css.html#tables
            table      : 'table table-bordered',
            caption    : 'caption',
            header     : 'bootstrap-header', // give the header a gradient background
            footerRow  : '',
            footerCells: '',
            icons      : '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
            sortNone   : 'bootstrap-icon-unsorted',
            sortAsc    : 'icon-chevron-up glyphicon glyphicon-chevron-up',     // includes classes for Bootstrap v2 & v3
            sortDesc   : 'icon-chevron-down glyphicon glyphicon-chevron-down', // includes classes for Bootstrap v2 & v3
            active     : '', // applied when column is sorted
            hover      : '', // use custom css here - bootstrap class may not override it
            filterRow  : '', // filter row class
            even       : '', // odd row zebra striping
            odd        : ''  // even row zebra striping
        });
      
        $('#table-modules').tablesorter({
    		theme: 'bootstrap',
            widthFixed: true,
            headerTemplate : '{content} {icon}',
    		widgets : [ 'uitheme', 'stickyHeaders', 'filter', 'zebra', 'group' ],
    		widgetOptions: {
                zebra : ['even', 'odd'],
                filter_reset : '.reset',
    		},
            sortList: [[0,1],[1,1],[2,0]]
    	});
    
        var modules = [
        <% for (var i=0; i<person.modules.length; i++){ %>
            <% var m = person.modules[i] %>
            {
                semester: "<%= 2000 + m.StudentModule.year %> Sem <%= m.StudentModule.semester %>",
                mc: <%= m.mc %>,
                code: "<%= m.code %>",
                department: "<%= m.moduleDepartment ? m.moduleDepartment.name : "null" %>"
            },
        <% } %> 
        ];
    
        for (var i=0; i<modules.length; i++) {
            var module = modules[i];
            var levelCodeRegex = /[0-9][0-9][0-9][0-9]/g;
            var match = levelCodeRegex.exec(module.code);
            if (match) {
                module.level = Math.floor(match[0]/1000)*1000;
            }
            if (!module.department || module.department == "null") {
                module.department = "No Department";
            }
        };
    
        var modulesByDept = _.groupBy(modules, function(m) { return m.department });
        var sems = [];
        for (var dept in modulesByDept) {
            modulesByDept[dept] = _.groupBy(modulesByDept[dept], function(m) {
                return m.semester
            })
        
            sems = _.union(sems, _.keys(modulesByDept[dept]));
        }
    
        for (var dept in modulesByDept) {
            sems.forEach(function(sem) {
                modulesByDept[dept][sem] = _.reduce(modulesByDept[dept][sem], function(memo,m) {
                    return m.mc + memo;
                }, 0)
            });
        
            modulesByDept[dept] = _.pairs(modulesByDept[dept]);
        }
    
        var dataByDept = [];
    
        if (sems.length > 1) {
            for (var dept in modulesByDept) {
                dataByDept.push({
                    data: _.sortBy(modulesByDept[dept], function(d){ return d[0] }),
                    label: dept
                })
            }
    
        	$.plot('#module-by-dept-chart', dataByDept, {
                series: {
                    stack: true,
                    bars: {
        				show: true,
        				barWidth: 0.6,
                        align: "center"
        			}
        		},
        		xaxis: {
                    axisLabel: "Semester",
        			mode: "categories",
        			tickLength: 0
        		},
                yaxis: {
                    axisLabel: "Modular Credits",
                    tickSize: 4
                },
                grid: {
                    markings: [
                        {
                            color: 'rgba(0,0,0,0.4)',
                            lineWidth:2,
                            yaxis: { from: 20, to: 20 }
                        }
                    ]
                }
            });
        } else {
            for (var dept in modulesByDept) {
                dataByDept.push({
                    data: modulesByDept[dept],
                    label: dept
                })
            }
    
        	$.plot('#module-by-dept-chart', dataByDept, {
                series: {
                    pie: {
                        show: true,
                        combine: {
                            threshold: 0.01
                        }
                    }
        		}
            });
        }
    
        var modulesByLevel = _.groupBy(modules, function(m) { return m.level });
        var levels = [];
        for (var level in modulesByLevel) {
            modulesByLevel[level] = _.groupBy(modulesByLevel[level], function(m) {
                return m.semester
            })
        
            levels = _.union(levels, _.keys(modulesByLevel[level]));
        }
    
        for (var level in modulesByLevel) {
            levels.forEach(function(sem) {
                modulesByLevel[level][sem] = _.reduce(modulesByLevel[level][sem], function(memo,m) {
                    return m.mc + memo;
                }, 0)
            });
        
            modulesByLevel[level] = _.pairs(modulesByLevel[level]);
        }
    
        var dataByLevel = [];
    
        if (sems.length > 1) {
            for (var level in modulesByLevel) {
                dataByLevel.push({
                    data: _.sortBy(modulesByLevel[level], function(d){ return d[0] }),
                    label: "Level " + level
                })
            }
    
    
        	$.plot("#module-by-level-chart", dataByLevel, {
                series: {
                    stack: true,
                    bars: {
        				show: true,
        				barWidth: 0.6,
                        align: "center"
        			}
        		},
        		xaxis: {
                    axisLabel: "Semester",
        			mode: "categories",
        			tickLength: 0
        		},
                yaxis: {
                    axisLabel: "Modular Credits",
                    tickSize: 4
                },
                grid: {
                    markings: [
                        {
                            color: 'rgba(0,0,0,0.4)',
                            lineWidth:2,
                            yaxis: { from: 20, to: 20 }
                        }
                    ]
                }
            });
        } else {
           for (var level in modulesByLevel) {
                dataByLevel.push({
                    data: modulesByLevel[level],
                    label: level
                })
            }
        
        	$.plot('#module-by-level-chart', dataByLevel, {
                series: {
                    pie: {
                        show: true,
                        combine: {
                            threshold: 0.01
                        }
                    }
        		}
            });
        }
    });
    function module(id) {
        window.location.href = '/module/' + id;
    }
    </script>
<% } %>

<div class="pull-right">
    <button onclick="history.back()"  class="btn btn-default">Back</button>
    <a href="/" class="btn btn-primary">New Search</a>
</div>
<div class="clearfix"></div>
<br>
<% include foot %>