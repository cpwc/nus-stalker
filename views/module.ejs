<% include head %>
<% 
function appendChecksum(matric) {
  var sum = 0;
  for (var i=1; i<8; i++) {
      sum += parseInt(matric[i]);
  }
  var table = ['Y', 'X', 'W', 'U', 'R', 'N', 'M', 'L', 'J', 'H', 'E', 'A', 'B'];
  if (typeof table[sum%13] == "undefined") return matric;
  return matric + table[sum%13];
}
%>
<div class="text-center">
    <h1><%= module.code %> <%= module.name %></h1>
</div>
<h3>Description</h3>
<p>
    <%= module.description ? module.description : "No description available" %>
</p>

<h3>Students By Faculty</h3>
<div class="thumbnail chart">
    <div id="students-by-faculty-chart" style="height:300px"></div>
</div>

<h3>Students (<%= module.students.length %>)</h3>
<table id="table-students" class="table table-hover tablesorter">
    <thead>
        <tr>
            <th colspan="2">Semster</th>
            <th rowspan="2" class="group-letter-4">Matric</th>
            <th rowspan="2">Name</th>
            <th rowspan="2" class="group-letter-99">Faculty</th>
        </tr>
        <tr>
            <th class="sorter-false group-letter-99">Year</th>
            <th class="sorter-false">Sem</th>
        </tr>
    </thead>
    <tbody>
        <% for (var i=0; i<module.students.length; i++) { %>
            <% var s = module.students[i] %>
            <tr onclick="stalk('<%= s.matric %>');" class="table-hand">
                <td><%= 2000 + s.StudentModule.year %> <span style="display:none"> Semester <%= s.StudentModule.semester %></span></td>
                <td><%= s.StudentModule.semester %></td>
                <td style="text-transform:uppercase"><%= appendChecksum(s.matric) %></td>
                <td><%= s.displayName %></td>
                <td><%= s.faculties[0] ? s.faculties[0].name : '-' %></td>
            </tr>
        <% } %>
    </tbody>
</table>

<form class="form-inline" id="table-students-pagination">
    <div class="form-group">
        <ul class="pagination">
            <li class="prev"><a href="#">&laquo;</a></li>
        </ul>
        <ul class="pagination pages">
        
        </ul>
        <ul class="pagination">
            <li class="next"><a href="#">&raquo;</a></li>
        </ul>
    </div>
</form>

<div class="pull-right">
    <button onclick="history.back()"  class="btn btn-default">Back</button>
    <a href="/" class="btn btn-primary">New Search</a>
</div>
<div class="clearfix"></div>
<br>
<script>
$(function() {
    $.extend($.tablesorter.themes.bootstrap, {
        // these classes are added to the table. To see other table classes available,
        // look here: http://twitter.github.com/bootstrap/base-css.html#tables
        table      : 'table table-bordered',
        caption    : 'caption',
        header     : 'bootstrap-header', // give the header a gradient background
        footerRow  : '',
        footerCells: '',
        icons      : '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
        sortNone   : 'bootstrap-icon-unsorted',
        sortAsc    : 'icon-chevron-up glyphicon glyphicon-chevron-up',     // includes classes for Bootstrap v2 & v3
        sortDesc   : 'icon-chevron-down glyphicon glyphicon-chevron-down', // includes classes for Bootstrap v2 & v3
        active     : '', // applied when column is sorted
        hover      : '', // use custom css here - bootstrap class may not override it
        filterRow  : '', // filter row class
        even       : '', // odd row zebra striping
        odd        : ''  // even row zebra striping
    });
      
    $('#table-students').tablesorter({
		theme: 'bootstrap',
        widthFixed: true,
        headerTemplate : '{content} {icon}',
		widgets : [ 'uitheme', 'stickyHeaders', 'filter', 'zebra', 'group' ],
		widgetOptions: {
            zebra : ['even', 'odd'],
            filter_reset : '.reset',
			group_separator : '-'
		},
        sortList: [[0,1],[1,1],[2,0]]
	}).on('pagerInitialized pagerComplete', function (e, c) {
        var i, pages = '', t = [],
            cur = c.page + 1,
            start = cur > 1 ? (c.totalPages - cur < 3 ? -3 + (c.totalPages - cur) : -1) : 0,
            end = cur < 3 ? 5 - cur : 2;
        for (i = start; i < end; i++) {
            if (cur + i >= 1 && cur + i < c.totalPages) { t.push( cur + i ); }
        }
        // make sure first and last page are included in the pagination
        if ($.inArray(1, t) === -1) { t.push(1); }
        if ($.inArray(c.totalPages, t) === -1) { t.push(c.totalPages); }
        // sort the list
        t = t.sort(function(a, b){ return a - b; });
        // make links and spacers
        $.each(t, function(j, v){
            pages += '<li class="' + (v === cur ? 'active' : '') + '"><a href="#">'+v+'</a></li>';
            pages += j < t.length - 1 && ( t[j+1] - 1 !== v ) ? '<li class="disabled"><a href="#">...</a></li>' : '';
        });
        $('#table-students-pagination .pages').html(pages);
    }).tablesorterPager({
        container: $('#table-students-pagination'),
        size: 10,
        output: 'showing: {startRow} to {endRow} ({totalRows})'
    });
    
    $('.pagination').on('click', 'a', function() {
        $(this).addClass('active').siblings().removeClass('active');
        $('#table-students').trigger('pageSet', $(this).html());
        return false;
    });
    
    var students = [
    <% for (var i=0; i<module.students.length; i++){ %>
        <% var s = module.students[i] %>
        {
            semester: "<%= 2000 + s.StudentModule.year %> Sem <%= s.StudentModule.semester %>",
            faculty: "<%= s.faculties[0] ? s.faculties[0].name : 'No Faculty' %>"
        },
    <% } %> 
    ];
    
    studentsByFaculty = _.groupBy(students, function(s) { return s.faculty });
    var sems = [];
    for (var fac in studentsByFaculty) {
        studentsByFaculty[fac] = _.countBy(studentsByFaculty[fac], function(m) {
            return m.semester
        })
    
        sems = _.union(sems, _.keys(studentsByFaculty[fac]));
    }

    // remove manually inserted values
    sems = _.without(sems, '2012 Sem 1', '2012 Sem 2');
    
    for (var fac in studentsByFaculty) {
        delete studentsByFaculty[fac]['2012 Sem 1'];
        delete studentsByFaculty[fac]['2012 Sem 2'];
        
        sems.forEach(function(sem) {
            studentsByFaculty[fac][sem] =studentsByFaculty[fac][sem] ? studentsByFaculty[fac][sem] : 0;
        });
        studentsByFaculty[fac] = _.pairs(studentsByFaculty[fac]);
    }

    var dataByFaculty = [];

    if (sems.length > 1) {
        for (var fac in studentsByFaculty) {
            dataByFaculty.push({
                data: _.sortBy(studentsByFaculty[fac], function(d){ return d[0] }),
                label: fac
            })
        }

    	$.plot('#students-by-faculty-chart', dataByFaculty, {
            series: {
                stack: true,
                bars: {
    				show: true,
    				barWidth: 0.6,
                    align: "center"
    			}
    		},
    		xaxis: {
                axisLabel: "Semester",
    			mode: "categories",
    			tickLength: 0
    		},
            yaxis: {
                axisLabel: "Students"
            },
        });
    } else {
        for (var fac in studentsByFaculty) {
            dataByFaculty.push({
                data: studentsByFaculty[fac],
                label: fac
            })
        }
        
    	$.plot('#students-by-faculty-chart', dataByFaculty, {
            series: {
                pie: {
                    show: true,
                    combine: {
                        threshold: 0.01
                    }
                }
    		}
        });
    }
});
function stalk(id) {
    window.location.href = '/person/' + id;
}
</script>
<% include foot %>