<% include head %>
<%
// courtesy of Beng Hee Eu
function appendChecksum(id) {
    var matches = id.toUpperCase().match(/^A\d{7}|U\d{6,7}/);
    if (matches) {
        var match = matches[0];

        // Discard 3rd digit from U-prefixed NUSNET ID
        if (match[0] === 'U' && match.length === 8) {
            match = match.slice(0, 3) + match.slice(4);
        }

        var weights = {
            U: [0, 1, 3, 1, 2, 7],
            A: [1, 1, 1, 1, 1, 1]
        }[match[0]];

        for (var i = 0, sum = 0, digits = match.slice(-6); i < 6; i++) {
            sum += weights[i] * digits[i];
        }

        return match + 'YXWURNMLJHEAB'[sum % 13];
    } else {
		return id;
	}
}
%>
<% include searchWidget %>
<div class="text-center">
    <h1><%= module.code %> <%= module.name %></h1>
</div>

<h3>Department</h3>
<p>
    <%= module.moduleDepartment ? module.moduleDepartment.name : "No department" %>
</p>

<h3>Description</h3>
<p>
    <%= module.description ? module.description : "No description available" %>
</p>

<h3>Students By Faculty</h3>
<div class="thumbnail chart">
    <div id="students-by-faculty-chart" style="height:300px"></div>
</div>

<h3>Students By Year</h3>
<div class="thumbnail chart">
    <div id="students-by-year-chart" style="height:300px"></div>
</div>

<h3>Students (<%= module.students.length %>)</h3>
<table id="table-students" class="table table-hover">
    <thead>
        <tr>
            <th class="group-letter-99">Semster</th>
            <th class="group-letter-4">Matric</th>
            <th>Name</th>
            <th class="group-letter-99">Faculty</th>
        </tr>
    </thead>
    <tbody>
        <% for (var i=0; i<module.students.length; i++) { %>
            <% var s = module.students[i] %>
            <tr onclick="student('<%= s.matric %>');" class="table-hand">
                <td>AY<%= s.studentModule.year %>/<%= s.studentModule.year+1 %> Sem <%= s.studentModule.semester %></td>
                <td style="text-transform:uppercase"><%= appendChecksum(s.matric) %></td>
                <td><%= s.displayName %></td>
                <td><%= s.faculties[0] ? s.faculties[0].name : '-' %></td>
            </tr>
        <% } %>
    </tbody>
</table>

<form class="form-inline" id="table-students-pagination">
    <div class="form-group">
        <ul class="pagination">
            <li class="prev"><a href="#">&laquo;</a></li>
        </ul>
        <ul class="pagination pages">

        </ul>
        <ul class="pagination">
            <li class="next"><a href="#">&raquo;</a></li>
        </ul>
    </div>
</form>

<h3>Students who took <%= module.code %> also took</h3>
<div class="thumbnail chart">
    <div id="also-took-chart" style="height:300px"></div>
</div>

<div class="pull-right">
    <button onclick="history.back()"  class="btn btn-default">Back</button>
    <a href="/" class="btn btn-primary"><i class="glyphicon glyphicon-search"></i> New Search</a>
</div>
<div class="clearfix"></div>
<br>
<script>
$(function() {
    $.extend($.tablesorter.themes.bootstrap, {
        // these classes are added to the table. To see other table classes available,
        // look here: http://twitter.github.com/bootstrap/base-css.html#tables
        table      : 'table table-bordered',
        caption    : 'caption',
        header     : 'bootstrap-header', // give the header a gradient background
        footerRow  : '',
        footerCells: '',
        icons      : '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
        sortNone   : 'bootstrap-icon-unsorted',
        sortAsc    : 'icon-chevron-up glyphicon glyphicon-chevron-up',     // includes classes for Bootstrap v2 & v3
        sortDesc   : 'icon-chevron-down glyphicon glyphicon-chevron-down', // includes classes for Bootstrap v2 & v3
        active     : '', // applied when column is sorted
        hover      : '', // use custom css here - bootstrap class may not override it
        filterRow  : '', // filter row class
        even       : '', // odd row zebra striping
        odd        : ''  // even row zebra striping
    });

    $('#table-students').tablesorter({
		theme: 'bootstrap',
        widthFixed: true,
        headerTemplate : '{content} {icon}',
		widgets : [ 'uitheme', 'stickyHeaders', 'filter', 'zebra', 'group' ],
		widgetOptions: {
            zebra : ['even', 'odd'],
            filter_reset : '.reset',
			group_separator : '-'
		},
        sortList: [[0,1],[1,0]]
	}).on('pagerInitialized pagerComplete', function (e, c) {
        var i, pages = '', t = [],
            cur = c.page + 1,
            start = cur > 1 ? (c.totalPages - cur < 3 ? -3 + (c.totalPages - cur) : -1) : 0,
            end = cur < 3 ? 5 - cur : 2;
        for (i = start; i < end; i++) {
            if (cur + i >= 1 && cur + i < c.totalPages) { t.push( cur + i ); }
        }
        // make sure first and last page are included in the pagination
        if ($.inArray(1, t) === -1) { t.push(1); }
        if ($.inArray(c.totalPages, t) === -1) { t.push(c.totalPages); }
        // sort the list
        t = t.sort(function(a, b){ return a - b; });
        // make links and spacers
        $.each(t, function(j, v){
            pages += '<li class="' + (v === cur ? 'active' : '') + '"><a href="#">'+v+'</a></li>';
            pages += j < t.length - 1 && ( t[j+1] - 1 !== v ) ? '<li class="disabled"><a href="#">...</a></li>' : '';
        });
        $('#table-students-pagination .pages').html(pages);
    }).tablesorterPager({
        container: $('#table-students-pagination'),
        size: 10,
        output: 'showing: {startRow} to {endRow} ({totalRows})'
    });

    $('.pagination').on('click', 'a', function() {
        $(this).addClass('active').siblings().removeClass('active');
        $('#table-students').trigger('pageSet', $(this).html());
        return false;
    });

    <%
        var now = new Date();
        var hasAyStarted = now.getMonth() > 6;
        var refYear = now.getFullYear() - 2000;
        refYear = hasAyStarted ? refYear : refYear-1;
    %>

    var students = [
    <% for (var i=0; i<module.students.length; i++){ %>
        <%
            var s = module.students[i];
        %>
        {
            name: "<%= s.displayName %>",
            semester: "<%= 2000 + s.studentModule.year %> Sem <%= s.studentModule.semester %>",
            faculty: "<%= s.faculties[0] ? s.faculties[0].name : 'No Faculty' %>",
            year: "<%= s.enrolledOn ? 'Year ' + (refYear - s.enrolledOn + 1 - (refYear - s.studentModule.year)) : 'Unknown' %>"
        },
    <% } %>
    ];

    var studentsByFaculty = _.groupBy(students, function(s) { return s.faculty });
    var sems = [];
    for (var fac in studentsByFaculty) {
        studentsByFaculty[fac] = _.countBy(studentsByFaculty[fac], function(m) {
            return m.semester
        })

        sems = _.union(sems, _.keys(studentsByFaculty[fac]));
    }

    // remove manually inserted values
    sems = _.without(sems, '2012 Sem 1', '2012 Sem 2');

    for (var fac in studentsByFaculty) {
        delete studentsByFaculty[fac]['2012 Sem 1'];
        delete studentsByFaculty[fac]['2012 Sem 2'];

        sems.forEach(function(sem) {
            studentsByFaculty[fac][sem] =studentsByFaculty[fac][sem] ? studentsByFaculty[fac][sem] : 0;
        });
        studentsByFaculty[fac] = _.pairs(studentsByFaculty[fac]);
    }

    var dataByFaculty = [];

    if (sems.length > 1) {
        for (var fac in studentsByFaculty) {
            dataByFaculty.push({
                data: _.sortBy(studentsByFaculty[fac], function(d){ return d[0] }),
                label: fac
            })
        }

        dataByFaculty = _.sortBy(dataByFaculty, function(y) {
            return y.label;
        });

    	$.plot('#students-by-faculty-chart', dataByFaculty, {
            series: {
                stack: true,
                bars: {
    				show: true,
    				barWidth: 0.6,
                    align: "center"
    			}
    		},
    		xaxis: {
                axisLabel: "Semester",
    			mode: "categories",
    			tickLength: 0
    		},
            yaxis: {
                axisLabel: "Students"
            },
        });
    } else {
        for (var fac in studentsByFaculty) {
            dataByFaculty.push({
                data: studentsByFaculty[fac],
                label: fac
            })
        }

        function labelFormatter(label, series) {
    		return "<div style='font-size:12pt; font-weight: bold; text-align:center; padding:2px; color:white;'>" + Math.round(series.percent) + "%</div>";
    	}

        dataByFaculty = _.sortBy(dataByFaculty, function(y) {
            return y.label;
        });

    	$.plot('#students-by-faculty-chart', dataByFaculty, {
            series: {
                pie: {
                    show: true,
                    combine: {
                        threshold: 0.001
                    },
                    radius: 1,
                    label: {
                        threshold: 0.05,
                        show: true,
                        radius: 2/3,
                        formatter: labelFormatter
                    }
                }
    		},
            grid: {
                hoverable: true,
                clickable: true
            }
        })
    }

    var studentsByYear = _.groupBy(students, function(s) { return s.year });
    sems = [];
    for (var year in studentsByYear) {
        studentsByYear[year] = _.countBy(studentsByYear[year], function(m) {
            return m.semester
        })

        sems = _.union(sems, _.keys(studentsByYear[year]));
    }

    // remove manually inserted values
    sems = _.without(sems, '2012 Sem 1', '2012 Sem 2');

    for (var year in studentsByYear) {
        delete studentsByYear[year]['2012 Sem 1'];
        delete studentsByYear[year]['2012 Sem 2'];

        sems.forEach(function(sem) {
            studentsByYear[year][sem] =studentsByYear[year][sem] ? studentsByYear[year][sem] : 0;
        });
        studentsByYear[year] = _.pairs(studentsByYear[year]);
    }

    var dataByYear = [];

    if (sems.length > 1) {
        for (var year in studentsByYear) {
            dataByYear.push({
                data: _.sortBy(studentsByYear[year], function(d){ return d[0] }),
                label: year
            })
        }

        dataByYear = _.sortBy(dataByYear, function(y) {
            return y.label;
        });

    	$.plot('#students-by-year-chart', dataByYear, {
            series: {
                stack: true,
                bars: {
    				show: true,
    				barWidth: 0.6,
                    align: "center"
    			}
    		},
    		xaxis: {
                axisLabel: "Semester",
    			mode: "categories",
    			tickLength: 0
    		},
            yaxis: {
                axisLabel: "Students"
            },
        });
    } else {
        for (var year in studentsByYear) {
            dataByYear.push({
                data: studentsByYear[year],
                label: year
            })
        }

        dataByYear = _.sortBy(dataByYear, function(y) {
            return y.label;
        });

        function labelFormatter(label, series) {
    		return "<div style='font-size:12pt; font-weight: bold; text-align:center; padding:2px; color: white'>" + Math.round(series.percent) + "%</div>";
    	}

    	$.plot('#students-by-year-chart', dataByYear, {
            series: {
                pie: {
                    show: true,
                    combine: {
                        threshold: 0.001
                    },
                    radius: 1,
                    label: {
                        threshold: 0.05,
                        show: true,
                        radius: 2/3,
                        formatter: labelFormatter
                    }
                }
    		},
            grid: {
                hoverable: true,
                clickable: true
            }
        });
    }

    var alsoTook = [
    <% for (var i=0; i<alsoTook.length; i++){ %>
        <% var m = alsoTook[i] %>
        ["<%= m.code %><br><%= m.name %>", <%= m.count %>],
    <% } %>
    ];

    $.plot('#also-took-chart', [alsoTook], {
        series: {
            bars: {
                show: true,
				barWidth: 0.6,
				align: "center"
            }
		},
        xaxis: {
            mode: "categories",
			tickLength: 0
		},
		yaxis: {
            axisLabel: "No. of Students"
        },
        grid: {
            hoverable: true,
            clickable: true
        }
    });

    $("#also-took-chart").bind("plotclick", function (event, pos, item) {
		if (item) {
            var code = item.series.data[item.dataIndex][0].split('<br>')[0];
            module(code);
		}
	});
});
</script>
<% include foot %>
